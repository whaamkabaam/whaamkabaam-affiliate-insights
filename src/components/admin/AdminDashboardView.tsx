
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { StatsCard } from "@/components/StatsCard";
import { CommissionTable } from "@/components/CommissionTable";
import { MonthlyCommissionChart } from "@/components/MonthlyCommissionChart";
import { DollarSign, Users, TrendingUp } from "lucide-react";
import { useAffiliate } from "@/contexts/AffiliateContext";
import { AffiliateSelector } from "./AffiliateSelector";
import { filterCommissions } from "@/utils/affiliateUtils";

export const AdminDashboardView = () => {
  const { affiliateOverviews, commissions, summary } = useAffiliate();
  const [selectedAffiliate, setSelectedAffiliate] = useState<string | null>(null);

  // Filter data based on selected affiliate
  const getFilteredData = () => {
    if (!selectedAffiliate) {
      // Return admin summary data
      const totalCommission = affiliateOverviews.reduce((sum, affiliate) => sum + (affiliate.totalCommission || 0), 0);
      const totalSales = affiliateOverviews.reduce((sum, affiliate) => sum + (affiliate.totalSales || 0), 0);
      const totalCustomers = affiliateOverviews.reduce((sum, affiliate) => sum + (affiliate.customerCount || 0), 0);
      
      return {
        totalCommission,
        totalSales,
        customerCount: totalCustomers,
        commissions: commissions
      };
    } else {
      // Return data for specific affiliate
      const filteredCommissions = filterCommissions(commissions, selectedAffiliate);
      const affiliate = affiliateOverviews.find(a => a.affiliateCode === selectedAffiliate);
      
      return {
        totalCommission: affiliate?.totalCommission || 0,
        totalSales: affiliate?.totalSales || 0,
        customerCount: affiliate?.customerCount || 0,
        commissions: filteredCommissions
      };
    }
  };

  const filteredData = getFilteredData();

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-semibold tracking-tight">
            {selectedAffiliate ? `${selectedAffiliate} Dashboard View` : "Admin Overview"}
          </h2>
          <p className="text-muted-foreground">
            {selectedAffiliate 
              ? `Viewing dashboard as it appears to ${selectedAffiliate}` 
              : "Complete overview of all affiliate performance"
            }
          </p>
        </div>
        <AffiliateSelector
          affiliates={affiliateOverviews}
          selectedAffiliate={selectedAffiliate}
          onAffiliateChange={setSelectedAffiliate}
        />
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        <StatsCard
          title="Total Commission"
          value={`$${filteredData.totalCommission.toFixed(2)}`}
          description={selectedAffiliate ? "Total earned by this affiliate" : "Total across all affiliates"}
          icon={<DollarSign className="w-4 h-4" />}
          className="bg-primary/5"
        />
        <StatsCard
          title="Total Sales"
          value={`$${filteredData.totalSales.toFixed(2)}`}
          description={selectedAffiliate ? "Revenue generated by this affiliate" : "Total revenue across all affiliates"}
          icon={<TrendingUp className="w-4 h-4" />}
        />
        <StatsCard
          title="Customers"
          value={filteredData.customerCount}
          description={selectedAffiliate ? "Customers referred by this affiliate" : "Total customers across all affiliates"}
          icon={<Users className="w-4 h-4" />}
        />
      </div>

      <div className="grid gap-4">
        <MonthlyCommissionChart />
      </div>

      <Card>
        <CardHeader>
          <CardTitle>
            {selectedAffiliate ? `${selectedAffiliate} Transactions` : "All Transactions"}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <CommissionTable limit={10} />
        </CardContent>
      </Card>
    </div>
  );
};
